/*
 * Marqeta Core API
 *
 * Simplified management of your payment programs
 *
 * API version: 3.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package marqeta

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type TransactionsApiService service

/*
TransactionsApiService Returns transactions

 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *TransactionsApiGetTransactionsOpts - Optional Parameters:
     * @param "Count" (optional.Int32) -  Number of transactions to retrieve
     * @param "StartIndex" (optional.Int32) -  Start index
     * @param "Fields" (optional.String) -  Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.
     * @param "SortBy" (optional.String) -  Sort order
     * @param "StartDate" (optional.String) -  Start date (yyyy-MM-dd | yyyy-MM-ddTHH:mm:ss.SS)
     * @param "EndDate" (optional.String) -  End date (yyyy-MM-dd | yyyy-MM-ddTHH:mm:ss.SS)
     * @param "Type_" (optional.String) -  Comma-delimited list of transaction types to include
     * @param "UserToken" (optional.String) -  User token
     * @param "BusinessToken" (optional.String) -  Business token
     * @param "ActingUserToken" (optional.String) -  Acting user token
     * @param "CardToken" (optional.String) -  Card token
     * @param "MerchantToken" (optional.String) -  Merchant token
     * @param "CampaignToken" (optional.String) -  Campaign token
     * @param "State" (optional.String) -  Comma-delimited list of transaction states to display e.g. PENDING | CLEARED | COMPLETION | DECLINED | ERROR | ALL
     * @param "Version" (optional.String) -
     * @param "Verbose" (optional.Bool) -

@return TransactionModelListResponse
*/

type TransactionsApiGetTransactionsOpts struct {
	Count           optional.Int32
	StartIndex      optional.Int32
	Fields          optional.String
	SortBy          optional.String
	StartDate       optional.String
	EndDate         optional.String
	Type_           optional.String
	UserToken       optional.String
	BusinessToken   optional.String
	ActingUserToken optional.String
	CardToken       optional.String
	MerchantToken   optional.String
	CampaignToken   optional.String
	State           optional.String
	Version         optional.String
	Verbose         optional.Bool
}

func (a *TransactionsApiService) GetTransactions(ctx context.Context, localVarOptionals *TransactionsApiGetTransactionsOpts) (TransactionModelListResponse, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue TransactionModelListResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/transactions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Count.IsSet() {
		localVarQueryParams.Add("count", parameterToString(localVarOptionals.Count.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.StartIndex.IsSet() {
		localVarQueryParams.Add("start_index", parameterToString(localVarOptionals.StartIndex.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Fields.IsSet() {
		localVarQueryParams.Add("fields", parameterToString(localVarOptionals.Fields.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SortBy.IsSet() {
		localVarQueryParams.Add("sort_by", parameterToString(localVarOptionals.SortBy.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.StartDate.IsSet() {
		localVarQueryParams.Add("start_date", parameterToString(localVarOptionals.StartDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EndDate.IsSet() {
		localVarQueryParams.Add("end_date", parameterToString(localVarOptionals.EndDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Type_.IsSet() {
		localVarQueryParams.Add("type", parameterToString(localVarOptionals.Type_.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.UserToken.IsSet() {
		localVarQueryParams.Add("user_token", parameterToString(localVarOptionals.UserToken.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.BusinessToken.IsSet() {
		localVarQueryParams.Add("business_token", parameterToString(localVarOptionals.BusinessToken.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ActingUserToken.IsSet() {
		localVarQueryParams.Add("acting_user_token", parameterToString(localVarOptionals.ActingUserToken.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CardToken.IsSet() {
		localVarQueryParams.Add("card_token", parameterToString(localVarOptionals.CardToken.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MerchantToken.IsSet() {
		localVarQueryParams.Add("merchant_token", parameterToString(localVarOptionals.MerchantToken.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CampaignToken.IsSet() {
		localVarQueryParams.Add("campaign_token", parameterToString(localVarOptionals.CampaignToken.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.State.IsSet() {
		localVarQueryParams.Add("state", parameterToString(localVarOptionals.State.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Version.IsSet() {
		localVarQueryParams.Add("version", parameterToString(localVarOptionals.Version.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Verbose.IsSet() {
		localVarQueryParams.Add("verbose", parameterToString(localVarOptionals.Verbose.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v TransactionModelListResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
TransactionsApiService Returns transactions for a specific funding account

 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param fundingSourceToken Funding account token
 * @param optional nil or *TransactionsApiGetTransactionsFundingsourceFundingsourcetokenOpts - Optional Parameters:
     * @param "Count" (optional.Int32) -  Number of transactions to retrieve
     * @param "StartIndex" (optional.Int32) -  Start index
     * @param "Fields" (optional.String) -  Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.
     * @param "SortBy" (optional.String) -  Sort order
     * @param "StartDate" (optional.String) -  Start date (yyyy-MM-dd)
     * @param "EndDate" (optional.String) -  End date (yyyy-MM-dd)
     * @param "Type_" (optional.String) -  Comma-delimited list of transaction types to include
     * @param "Polarity" (optional.String) -  Type of transactions to retrieve: CREDIT or DEBIT
     * @param "Version" (optional.String) -
     * @param "Verbose" (optional.Bool) -

@return TransactionModelListResponse
*/

type TransactionsApiGetTransactionsFundingsourceFundingsourcetokenOpts struct {
	Count      optional.Int32
	StartIndex optional.Int32
	Fields     optional.String
	SortBy     optional.String
	StartDate  optional.String
	EndDate    optional.String
	Type_      optional.String
	Polarity   optional.String
	Version    optional.String
	Verbose    optional.Bool
}

func (a *TransactionsApiService) GetTransactionsFundingsourceFundingsourcetoken(ctx context.Context, fundingSourceToken string, localVarOptionals *TransactionsApiGetTransactionsFundingsourceFundingsourcetokenOpts) (TransactionModelListResponse, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue TransactionModelListResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/transactions/fundingsource/{funding_source_token}"
	localVarPath = strings.Replace(localVarPath, "{"+"funding_source_token"+"}", fmt.Sprintf("%v", fundingSourceToken), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Count.IsSet() {
		localVarQueryParams.Add("count", parameterToString(localVarOptionals.Count.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.StartIndex.IsSet() {
		localVarQueryParams.Add("start_index", parameterToString(localVarOptionals.StartIndex.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Fields.IsSet() {
		localVarQueryParams.Add("fields", parameterToString(localVarOptionals.Fields.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SortBy.IsSet() {
		localVarQueryParams.Add("sort_by", parameterToString(localVarOptionals.SortBy.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.StartDate.IsSet() {
		localVarQueryParams.Add("start_date", parameterToString(localVarOptionals.StartDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EndDate.IsSet() {
		localVarQueryParams.Add("end_date", parameterToString(localVarOptionals.EndDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Type_.IsSet() {
		localVarQueryParams.Add("type", parameterToString(localVarOptionals.Type_.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Polarity.IsSet() {
		localVarQueryParams.Add("polarity", parameterToString(localVarOptionals.Polarity.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Version.IsSet() {
		localVarQueryParams.Add("version", parameterToString(localVarOptionals.Version.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Verbose.IsSet() {
		localVarQueryParams.Add("verbose", parameterToString(localVarOptionals.Verbose.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v TransactionModelListResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
TransactionsApiService Returns a transaction

 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param token Transaction token
 * @param optional nil or *TransactionsApiGetTransactionsTokenOpts - Optional Parameters:
     * @param "Fields" (optional.String) -  Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.
     * @param "Version" (optional.String) -
     * @param "Verbose" (optional.Bool) -

@return TransactionModel
*/

type TransactionsApiGetTransactionsTokenOpts struct {
	Fields  optional.String
	Version optional.String
	Verbose optional.Bool
}

func (a *TransactionsApiService) GetTransactionsToken(ctx context.Context, token string, localVarOptionals *TransactionsApiGetTransactionsTokenOpts) (TransactionModel, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue TransactionModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/transactions/{token}"
	localVarPath = strings.Replace(localVarPath, "{"+"token"+"}", fmt.Sprintf("%v", token), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Fields.IsSet() {
		localVarQueryParams.Add("fields", parameterToString(localVarOptionals.Fields.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Version.IsSet() {
		localVarQueryParams.Add("version", parameterToString(localVarOptionals.Version.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Verbose.IsSet() {
		localVarQueryParams.Add("verbose", parameterToString(localVarOptionals.Verbose.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v TransactionModel
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
TransactionsApiService Returns related transactions

 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param token Transaction token
 * @param optional nil or *TransactionsApiGetTransactionsTokenRelatedOpts - Optional Parameters:
     * @param "Count" (optional.Int32) -  Number of transactions to retrieve
     * @param "StartIndex" (optional.Int32) -  Start index
     * @param "Fields" (optional.String) -  Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.
     * @param "SortBy" (optional.String) -  Sort order
     * @param "StartDate" (optional.String) -  Start date (yyyy-MM-dd | yyyy-MM-ddTHH:mm:ss.SS)
     * @param "EndDate" (optional.String) -  End date (yyyy-MM-dd | yyyy-MM-ddTHH:mm:ss.SS)
     * @param "Type_" (optional.String) -  Comma-delimited list of transaction types to include
     * @param "State" (optional.String) -  Comma-delimited list of transaction states to display e.g. PENDING | CLEARED | COMPLETION | ALL
     * @param "Version" (optional.String) -
     * @param "Verbose" (optional.Bool) -

@return TransactionModelListResponse
*/

type TransactionsApiGetTransactionsTokenRelatedOpts struct {
	Count      optional.Int32
	StartIndex optional.Int32
	Fields     optional.String
	SortBy     optional.String
	StartDate  optional.String
	EndDate    optional.String
	Type_      optional.String
	State      optional.String
	Version    optional.String
	Verbose    optional.Bool
}

func (a *TransactionsApiService) GetTransactionsTokenRelated(ctx context.Context, token string, localVarOptionals *TransactionsApiGetTransactionsTokenRelatedOpts) (TransactionModelListResponse, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue TransactionModelListResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/transactions/{token}/related"
	localVarPath = strings.Replace(localVarPath, "{"+"token"+"}", fmt.Sprintf("%v", token), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Count.IsSet() {
		localVarQueryParams.Add("count", parameterToString(localVarOptionals.Count.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.StartIndex.IsSet() {
		localVarQueryParams.Add("start_index", parameterToString(localVarOptionals.StartIndex.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Fields.IsSet() {
		localVarQueryParams.Add("fields", parameterToString(localVarOptionals.Fields.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SortBy.IsSet() {
		localVarQueryParams.Add("sort_by", parameterToString(localVarOptionals.SortBy.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.StartDate.IsSet() {
		localVarQueryParams.Add("start_date", parameterToString(localVarOptionals.StartDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EndDate.IsSet() {
		localVarQueryParams.Add("end_date", parameterToString(localVarOptionals.EndDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Type_.IsSet() {
		localVarQueryParams.Add("type", parameterToString(localVarOptionals.Type_.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.State.IsSet() {
		localVarQueryParams.Add("state", parameterToString(localVarOptionals.State.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Version.IsSet() {
		localVarQueryParams.Add("version", parameterToString(localVarOptionals.Version.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Verbose.IsSet() {
		localVarQueryParams.Add("verbose", parameterToString(localVarOptionals.Verbose.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v TransactionModelListResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
